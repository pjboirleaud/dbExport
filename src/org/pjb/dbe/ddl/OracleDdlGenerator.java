package org.pjb.dbe.ddl;

import java.sql.Clob;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.pjb.dbe.Configuration;

public class OracleDdlGenerator implements IDdlGenerator {
	public void generateDdl(Connection jdbcConnection, String catalog, String schema, List<String> tables,
			List<String> views) {
		System.out.println("--");
		System.out.println("-- DDL Generated by DbExport / " + getClass().getName());
		System.out.println("-- Date: " + new Date());
		System.out.println("-- URL: " + Configuration.getInstance().getStringValue("url"));
		System.out.println("-- ");
		System.out.println();

		System.out.println("-- TABLES ");
		System.out.println();

		for (String table : tables) {
			System.out.println("CREATE TABLE " + table + "(");
			generateColumnsDdl(jdbcConnection, catalog, schema, table);
			generatePKsDdl(jdbcConnection, catalog, schema, table);

			System.out.println(");");
			System.out.println();
		}

		if (Configuration.getInstance().getBooleanValue("export.ddl.views", true)) {
			System.out.println();
			System.out.println("-- VIEWS ");
			System.out.println();

			for (String view : views) {
				generateViewDDL(jdbcConnection, catalog, schema, view);
			}

			System.out.println();
		}
	}

	public void generateNativeDdl(Connection jdbcConnection, String catalog, String schema, List<String> tables,
			List<String> views) {
		System.out.println("--");
		System.out.println("-- DDL Generated by DbExport / " + getClass().getName());
		System.out.println("-- Date: " + new Date());
		System.out.println("-- URL: " + Configuration.getInstance().getStringValue("url"));
		System.out.println("-- ");
		System.out.println();

		System.out.println("-- TABLES ");
		System.out.println();

		for (String table : tables) {
			generateTableNativeDDL(jdbcConnection, catalog, schema, table);
		}

		if (Configuration.getInstance().getBooleanValue("export.ddl.views", true)) {
			System.out.println();
			System.out.println("-- VIEWS ");
			System.out.println();

			for (String view : views)
				generateViewDDL(jdbcConnection, catalog, schema, view);
		}
	}

	private void generateTableNativeDDL(Connection jdbcConnection, String catalog, String schema, String table) {
		try {
			String query = "select DBMS_METADATA.GET_DDL('TABLE','" + table + "') from DUAL";
			Statement statement = jdbcConnection.createStatement();
			ResultSet res = statement.executeQuery(query);
			res.next();
			Clob clob = res.getClob(1);
			System.out.println(clob.getSubString(1L, (int) clob.length()) + ";");
		} catch (Exception e) {
			System.out.println("Error: could not retrieve DDL for the view '" + table + "' from the backend.");
			throw new RuntimeException(e);
		}
	}

	private void generateViewDDL(Connection jdbcConnection, String catalog, String schema, String view) {
		try {
			String query = "select DBMS_METADATA.GET_DDL('VIEW','" + view + "') from DUAL";
			Statement statement = jdbcConnection.createStatement();
			ResultSet res = statement.executeQuery(query);
			res.next();
			Clob clob = res.getClob(1);
			System.out.println(clob.getSubString(1L, (int) clob.length()) + ";");
		} catch (Exception e) {
			System.out.println("Error: could not retrieve DDL for the view '" + view + "' from the backend.");
			throw new RuntimeException(e);
		}
	}

	private List<String> getPKs(Connection jdbcConnection, String catalog, String schema, String table) {
		List<String> pks = new ArrayList<String>();
		try {
			DatabaseMetaData meta = jdbcConnection.getMetaData();
			ResultSet res = meta.getPrimaryKeys(catalog, schema, table);
			while (res.next())
				pks.add(res.getString(4));
		} catch (Exception e) {
			System.out.println(
					"Error: could not retrieve column PK metadata for the table '" + table + "' from the backend.");
			throw new RuntimeException(e);
		}
		return pks;
	}

	private boolean generatePKsDdl(Connection jdbcConnection, String catalog, String schema, String table) {
		try {
			List<String> pks = getPKs(jdbcConnection, catalog, schema, table);

			DatabaseMetaData meta = jdbcConnection.getMetaData();
			ResultSet res = meta.getColumns(catalog, schema, table, null);

			System.out.print("   PRIMARY KEY (");
			int n = pks.size();

			while ((n > 0) && (res.next())) {
				String name = res.getString("COLUMN_NAME");
				if (pks.contains(name)) {
					System.out.print(name);
					n--;
					if (n > 0) {
						System.out.print(", ");
					}
				}
			}
			res.close();
			System.out.println(")");
		} catch (Exception e) {
			System.out.println(
					"Error: could not retrieve column PK metadata for the table '" + table + "' from the backend.");
			e.printStackTrace();
			return false;
		}
		return true;
	}

	private boolean generateColumnsDdl(Connection jdbcConnection, String catalog, String schema, String table) {
		try {
			DatabaseMetaData meta = jdbcConnection.getMetaData();
			ResultSet res = meta.getColumns(catalog, schema, table, null);

			while (res.next()) {
				String name = res.getString("COLUMN_NAME");
				String type = res.getString("TYPE_NAME");
				boolean nullable = "1".equals(res.getString("NULLABLE"));
				int size = res.getInt("COLUMN_SIZE");

				int chiffresApresVirgule = 0;
				if ((type.equalsIgnoreCase("NUMBER")) || (type.equalsIgnoreCase("NUMERIC"))
						|| (type.equalsIgnoreCase("DECIMAL"))) {
					type = "NUMBER";
					chiffresApresVirgule = res.getInt("DECIMAL_DIGITS");
				} else if (type.equalsIgnoreCase("VARCHAR")) {
					type = "VARCHAR2";
				} else if (type.equalsIgnoreCase("DATETIME")) {
					type = "DATE";
				} else if (type.startsWith("TIMESTAMP")) {
					type = "TIMESTAMP(6)";
				}

				System.out.print("   " + name);
				if ((type.startsWith("VARCHAR")) || (type.equals("CHAR")) || (type.equals("NUMBER"))
						|| (type.equals("NUMERIC")) || (type.equals("BLOB"))) {
					if (chiffresApresVirgule == 0)
						System.out.print(" " + type + "(" + size + ")");
					else
						System.out.print(" " + type + "(" + size + "," + chiffresApresVirgule + ")");
				} else {
					System.out.print(" " + type);
				}

				if (!nullable) {
					System.out.print(" NOT NULL");
				}

				System.out.println(",");
			}
		} catch (Exception e) {
			System.out.println(
					"Error: could not retrieve column metadata for the table '" + table + "' from the backend.");
			e.printStackTrace();
			return false;
		}
		return true;
	}
}